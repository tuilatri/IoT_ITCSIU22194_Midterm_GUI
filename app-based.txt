import tkinter as tk
from tkinter import messagebox
import paho.mqtt.client as mqtt
import random
import time
import threading
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# MQTT setup
broker = "iot-dashboard-02.cloud.shiftr.io"
port = 1883
username = "iot-dashboard-02"
password = "YBxsZiVmkHljoCId"
client_id = f"iot-simulator-{random.randint(0, 1000)}"
client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv311)

# Mock data simulation control
is_simulating = False
simulation_event = threading.Event()
simulation_thread = None

# GUI class
class IoTSimulatorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("IoT Simulator")
        self.root.geometry("400x500")
        self.root.configure(bg="#f5f6fa")

        # Sensor labels
        self.temp_label = tk.Label(root, text="Temperature: -- °C", font=("Inter", 12), bg="#f5f6fa")
        self.temp_label.pack(pady=10)
        self.humidity_label = tk.Label(root, text="Humidity: -- %", font=("Inter", 12), bg="#f5f6fa")
        self.humidity_label.pack(pady=10)
        self.light_label = tk.Label(root, text="Light Level: -- lx", font=("Inter", 12), bg="#f5f6fa")
        self.light_label.pack(pady=10)

        # Device status labels
        self.light_status_label = tk.Label(root, text="Light Status: Unknown", font=("Inter", 10), bg="#e8f0fe", width=20, relief="solid")
        self.light_status_label.pack(pady=5)
        self.fan_status_label = tk.Label(root, text="Fan Status: Unknown", font=("Inter", 10), bg="#e8f0fe", width=20, relief="solid")
        self.fan_status_label.pack(pady=5)
        self.motor_status_label = tk.Label(root, text="Motor Status: Unknown", font=("Inter", 10), bg="#e8f0fe", width=20, relief="solid")
        self.motor_status_label.pack(pady=5)

        # Control buttons
        # Light control
        light_frame = tk.Frame(root, bg="#f5f6fa")
        light_frame.pack(pady=10)
        tk.Button(light_frame, text="Light ON", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/light", "ON")).pack(side=tk.LEFT, padx=5)
        tk.Button(light_frame, text="Light OFF", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/light", "OFF")).pack(side=tk.LEFT, padx=5)

        # Fan control
        fan_frame = tk.Frame(root, bg="#f5f6fa")
        fan_frame.pack(pady=10)
        tk.Button(fan_frame, text="Fan ON", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/fan", "ON")).pack(side=tk.LEFT, padx=5)
        tk.Button(fan_frame, text="Fan OFF", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/fan", "OFF")).pack(side=tk.LEFT, padx=5)

        # Motor control
        motor_frame = tk.Frame(root, bg="#f5f6fa")
        motor_frame.pack(pady=10)
        tk.Button(motor_frame, text="Forward", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/motor", "FORWARD")).pack(side=tk.LEFT, padx=5)
        tk.Button(motor_frame, text="Stop", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/motor", "STOP")).pack(side=tk.LEFT, padx=5)
        tk.Button(motor_frame, text="Backward", font=("Inter", 10), bg="#4a90e2", fg="white", command=lambda: self.control_device("home/control/motor", "BACKWARD")).pack(side=tk.LEFT, padx=5)

        # Mock data toggle button
        self.mock_button = tk.Button(root, text="Start Mock Data", font=("Inter", 10), bg="#4a90e2", fg="white", command=self.toggle_mock_data)
        self.mock_button.pack(pady=20)

    def control_device(self, topic, command):
        valid_commands = {
            'home/control/light': ['ON', 'OFF'],
            'home/control/fan': ['ON', 'OFF'],
            'home/control/motor': ['FORWARD', 'BACKWARD', 'STOP']
        }
        if topic in valid_commands and command in valid_commands[topic]:
            try:
                client.publish(topic, command, qos=1)
                logging.info(f"Published control command: {command} to {topic}")
                messagebox.showinfo("Success", f"Command {command} sent to {topic}")
            except Exception as e:
                logging.error(f"Error publishing command: {e}")
                messagebox.showerror("Error", f"Failed to send command: {e}")
        else:
            messagebox.showerror("Error", "Invalid command or topic")

    def toggle_mock_data(self):
        global is_simulating, simulation_thread
        if is_simulating:
            simulation_event.clear()
            is_simulating = False
            self.mock_button.config(text="Start Mock Data")
            logging.info("Mock data simulation stopped")
            messagebox.showinfo("Info", "Mock data simulation stopped")
        else:
            simulation_event.set()
            simulation_thread = threading.Thread(target=simulate_sensors, daemon=True)
            simulation_thread.start()
            is_simulating = True
            self.mock_button.config(text="Stop Mock Data")
            logging.info("Mock data simulation started")
            messagebox.showinfo("Info", "Mock data simulation started")

    def update_sensor(self, sensor, value):
        if sensor == "temperature":
            self.temp_label.config(text=f"Temperature: {value:.2f} °C" if value is not None else "Temperature: -- °C")
        elif sensor == "humidity":
            self.humidity_label.config(text=f"Humidity: {value:.2f} %" if value is not None else "Humidity: -- %")
        elif sensor == "light":
            self.light_label.config(text=f"Light Level: {value:.2f} lx" if value is not None else "Light Level: -- lx")

    def update_device_status(self, device, status):
        if device == "light":
            self.light_status_label.config(text=f"Light Status: {status}")
        elif device == "fan":
            self.fan_status_label.config(text=f"Fan Status: {status}")
        elif device == "motor":
            self.motor_status_label.config(text=f"Motor Status: {status}")

# MQTT callbacks
def on_connect(client, userdata, flags, reason_code, properties=None):
    if reason_code == 0:
        logging.info("Connected to MQTT Broker!")
        client.subscribe("home/sensors/temperature", qos=1)
        client.subscribe("home/sensors/humidity", qos=1)
        client.subscribe("home/sensors/light", qos=1)
        client.subscribe("home/control/light", qos=1)
        client.subscribe("home/control/fan", qos=1)
        client.subscribe("home/control/motor", qos=1)
    else:
        logging.error(f"Failed to connect, return code {reason_code}")

def on_message(client, userdata, msg):
    topic = msg.topic
    payload = msg.payload.decode()
    logging.info(f"Received {payload} from {topic}")
    try:
        if topic == "home/sensors/temperature":
            gui.update_sensor("temperature", float(payload))
        elif topic == "home/sensors/humidity":
            gui.update_sensor("humidity", float(payload))
        elif topic == "home/sensors/light":
            gui.update_sensor("light", float(payload))
        elif topic == "home/control/light":
            gui.update_device_status("light", payload.upper())
        elif topic == "home/control/fan":
            gui.update_device_status("fan", payload.upper())
        elif topic == "home/control/motor":
            gui.update_device_status("motor", payload.capitalize())
    except Exception as e:
        logging.error(f"Error processing message from {topic}: {e}")

# Simulate sensor data
def simulate_sensors():
    while simulation_event.is_set():
        temp = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(40.0, 80.0), 2)
        light = round(random.uniform(100, 1000), 2)
        try:
            client.publish("home/sensors/temperature", str(temp), qos=1)
            client.publish("home/sensors/humidity", str(humidity), qos=1)
            client.publish("home/sensors/light", str(light), qos=1)
            logging.info(f"Published sensor data: T={temp}, H={humidity}, L={light}")
            gui.update_sensor("temperature", temp)
            gui.update_sensor("humidity", humidity)
            gui.update_sensor("light", light)
        except Exception as e:
            logging.error(f"Error publishing sensor data: {e}")
        time.sleep(5)  # As per requirement

# Main execution
if __name__ == "__main__":
    # Initialize GUI
    root = tk.Tk()
    gui = IoTSimulatorGUI(root)

    # Start MQTT client
    client.on_connect = on_connect
    client.on_message = on_message
    client.username_pw_set(username, password)
    try:
        client.connect(broker, port, 60)
        client.loop_start()
        logging.info("MQTT client started")
    except Exception as e:
        logging.error(f"MQTT connection failed: {e}")
        messagebox.showerror("Error", f"MQTT connection failed: {e}")

    # Run GUI
    root.mainloop()

