import tkinter as tk
from tkinter import messagebox, ttk, scrolledtext, filedialog
import paho.mqtt.client as mqtt
import random
import time
import threading
import logging
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from collections import deque
import datetime
from PIL import Image, ImageTk
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# MQTT setup (default values)
broker = "iot-dashboard.cloud.shiftr.io"
port = 1883
username = "iot-dashboard"
password = "YBxsZiVmkHljoCId"
client_id = f"iot-simulator-{random.randint(0, 1000)}"
client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv311)

# Mock data simulation control
is_simulating = False
simulation_event = threading.Event()
simulation_thread = None

# Data storage for graphs
sensor_data = {
    'temperature': {'values': deque(maxlen=50), 'times': deque(maxlen=50)},
    'humidity': {'values': deque(maxlen=50), 'times': deque(maxlen=50)},
    'light': {'values': deque(maxlen=50), 'times': deque(maxlen=50)}
}

device_states = {
    'light': {'values': deque(maxlen=50), 'times': deque(maxlen=50)},
    'fan': {'values': deque(maxlen=50), 'times': deque(maxlen=50)},
    'motor': {'values': deque(maxlen=50), 'times': deque(maxlen=50)}
}

# GUI class
class IoTSimulatorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("IoT Control Dashboard")
        self.root.geometry("685x900")
        self.root.configure(bg="#f8f9fa")
        self.root.resizable(False, True)
        
        # Colors
        self.primary_color = "#2f398e"
        self.secondary_color = "#64748b"
        self.success_color = "#10b981"
        self.warning_color = "#f59e0b"
        self.danger_color = "#ef4444"
        self.bg_color = "#f8f9fa"
        self.card_color = "#ffffff"
        
        self.create_widgets()
        self.setup_graphs()
        self.is_connected = False
        
    def create_widgets(self):
        main_frame = tk.Frame(self.root, bg=self.bg_color)
        main_frame.pack(fill="both", expand=True)
        
        self.canvas = tk.Canvas(main_frame, bg=self.bg_color, width=665)
        self.scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg=self.bg_color)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas_window = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)
        self.canvas.bind_all("<Button-4>", lambda e: self.canvas.yview_scroll(-1, "units"))
        self.canvas.bind_all("<Button-5>", lambda e: self.canvas.yview_scroll(1, "units"))
        self.root.bind("<Up>", lambda e: self.canvas.yview_scroll(-1, "units"))
        self.root.bind("<Down>", lambda e: self.canvas.yview_scroll(1, "units"))
        self.root.bind("<Prior>", lambda e: self.canvas.yview_scroll(-1, "pages"))
        self.root.bind("<Next>", lambda e: self.canvas.yview_scroll(1, "pages"))
        
        self.canvas.bind('<Configure>', self._configure_canvas)
        
        self.create_header()
        self.create_broker_config()
        self.create_sensor_controls()
        self.create_device_controls()
        self.create_graphs()
        self.create_console()
        self.create_footer()
        
    def _on_mousewheel(self, event):
        if event.delta:
            self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        elif event.num == 4:
            self.canvas.yview_scroll(-1, "units")
        elif event.num == 5:
            self.canvas.yview_scroll(1, "units")
        
    def _configure_canvas(self, event):
        canvas_width = event.width
        self.canvas.itemconfig(self.canvas_window, width=canvas_width)
        
    def create_header(self):
        header_frame = tk.Frame(self.scrollable_frame, bg=self.primary_color, height=80)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        content_frame = tk.Frame(header_frame, bg=self.primary_color)
        content_frame.pack(expand=True, fill="both", padx=20, pady=10)
        
        logo_frame = tk.Frame(content_frame, bg=self.primary_color)
        logo_frame.pack(anchor="w")
        
        try:
            # Load and resize IU logo
            logo_path = os.path.join("static", "images", "iu_logo.png")
            logo_image = Image.open(logo_path)
            logo_image = logo_image.resize((40, 40), Image.LANCZOS)  # Resize to 40x40 pixels
            self.logo_photo = ImageTk.PhotoImage(logo_image)
            logo_label = tk.Label(logo_frame, image=self.logo_photo, bg=self.primary_color)
            logo_label.pack(side="left", padx=(0, 10))
        except Exception as e:
            logging.error(f"Failed to load logo: {e}")
            # Fallback to text if image fails
            logo_label = tk.Label(logo_frame, text="IU", font=("Arial", 24), 
                                bg=self.primary_color, fg="white")
            logo_label.pack(side="left", padx=(0, 10))
        
        text_frame = tk.Frame(logo_frame, bg=self.primary_color)
        text_frame.pack(side="left")
        
        title_label = tk.Label(text_frame, text="IoT Control Dashboard", 
                              font=("Arial", 16, "bold"), bg=self.primary_color, fg="white")
        title_label.pack(anchor="w")
        
        subtitle_label = tk.Label(text_frame, text="Smart Home Automation System", 
                                 font=("Arial", 10), bg=self.primary_color, fg="#e2e8f0")
        subtitle_label.pack(anchor="w")
        
    def create_broker_config(self):
        broker_frame = self.create_card("MQTT Broker Configuration")
        
        settings_frame = tk.Frame(broker_frame, bg=self.card_color)
        settings_frame.pack(fill="x", padx=10, pady=5)
        
        row1 = tk.Frame(settings_frame, bg=self.card_color)
        row1.pack(fill="x", pady=2)
        
        tk.Label(row1, text="Broker:", font=("Arial", 9), bg=self.card_color).pack(side="left")
        self.broker_entry = tk.Entry(row1, font=("Arial", 9), width=25)
        self.broker_entry.pack(side="left", padx=(5, 10))
        self.broker_entry.insert(0, broker)
        
        tk.Label(row1, text="Port:", font=("Arial", 9), bg=self.card_color).pack(side="left")
        self.port_entry = tk.Entry(row1, font=("Arial", 9), width=8)
        self.port_entry.pack(side="left", padx=(5, 0))
        self.port_entry.insert(0, str(port))
        
        row2 = tk.Frame(settings_frame, bg=self.card_color)
        row2.pack(fill="x", pady=2)
        
        tk.Label(row2, text="Username:", font=("Arial", 9), bg=self.card_color).pack(side="left")
        self.username_entry = tk.Entry(row2, font=("Arial", 9), width=20)
        self.username_entry.pack(side="left", padx=(5, 10))
        self.username_entry.insert(0, username)
        
        tk.Label(row2, text="Password:", font=("Arial", 9), bg=self.card_color).pack(side="left")
        self.password_entry = tk.Entry(row2, font=("Arial", 9), width=20, show="*")
        self.password_entry.pack(side="left", padx=(5, 0))
        self.password_entry.insert(0, password)
        
        btn_frame = tk.Frame(broker_frame, bg=self.card_color)
        btn_frame.pack(fill="x", padx=10, pady=5)
        
        self.connect_btn = tk.Button(btn_frame, text="Connect", font=("Arial", 9, "bold"),
                                   bg=self.success_color, fg="white", relief="flat",
                                   command=self.connect_mqtt)
        self.connect_btn.pack(side="left", padx=(0, 10))
        
        self.connection_status = tk.Label(btn_frame, text="● Disconnected", 
                                        font=("Arial", 9), fg=self.danger_color, bg=self.card_color)
        self.connection_status.pack(side="left")
        
    def create_sensor_controls(self):
        sensor_frame = self.create_card("Sensor Data Controls")
        
        readings_frame = tk.Frame(sensor_frame, bg=self.card_color)
        readings_frame.pack(fill="x", padx=10, pady=5)
        
        self.temp_label = tk.Label(readings_frame, text="Temperature: -- °C", 
                                  font=("Arial", 10, "bold"), bg=self.card_color, fg=self.secondary_color)
        self.temp_label.pack(anchor="w")
        
        self.humidity_label = tk.Label(readings_frame, text="Humidity: -- %", 
                                      font=("Arial", 10, "bold"), bg=self.card_color, fg=self.secondary_color)
        self.humidity_label.pack(anchor="w")
        
        self.light_label = tk.Label(readings_frame, text="Light Level: -- lx", 
                                   font=("Arial", 10, "bold"), bg=self.card_color, fg=self.secondary_color)
        self.light_label.pack(anchor="w")
        
        mock_frame = tk.Frame(sensor_frame, bg=self.card_color)
        mock_frame.pack(fill="x", padx=10, pady=5)
        
        self.mock_button = tk.Button(mock_frame, text="Start Mock Data", font=("Arial", 9, "bold"),
                                   bg=self.primary_color, fg="white", relief="flat",
                                   command=self.toggle_mock_data)
        self.mock_button.pack(side="left", padx=(0, 10))
        
        manual_frame = tk.Frame(sensor_frame, bg=self.card_color)
        manual_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(manual_frame, text="Manual Input:", font=("Arial", 9, "bold"), 
                bg=self.card_color).pack(anchor="w")
        
        temp_input_frame = tk.Frame(manual_frame, bg=self.card_color)
        temp_input_frame.pack(fill="x", pady=2)
        
        tk.Label(temp_input_frame, text="Temp:", font=("Arial", 8), bg=self.card_color).pack(side="left")
        self.temp_entry = tk.Entry(temp_input_frame, font=("Arial", 8), width=8)
        self.temp_entry.pack(side="left", padx=5)
        
        tk.Label(temp_input_frame, text="Humidity:", font=("Arial", 8), bg=self.card_color).pack(side="left", padx=(10, 0))
        self.humidity_entry = tk.Entry(temp_input_frame, font=("Arial", 8), width=8)
        self.humidity_entry.pack(side="left", padx=5)
        
        tk.Label(temp_input_frame, text="Light:", font=("Arial", 8), bg=self.card_color).pack(side="left", padx=(10, 0))
        self.light_entry = tk.Entry(temp_input_frame, font=("Arial", 8), width=8)
        self.light_entry.pack(side="left", padx=5)
        
        submit_btn = tk.Button(temp_input_frame, text="Submit", font=("Arial", 8, "bold"),
                             bg=self.warning_color, fg="white", relief="flat",
                             command=self.submit_manual_data)
        submit_btn.pack(side="left", padx=10)
        
    def create_device_controls(self):
        device_frame = self.create_card("Device Controls")
        
        status_frame = tk.Frame(device_frame, bg=self.card_color)
        status_frame.pack(fill="x", padx=10, pady=5)
        
        self.light_status_label = tk.Label(status_frame, text="Light: Unknown", 
                                         font=("Arial", 9), bg="#e5e7eb", fg=self.secondary_color,
                                         relief="solid", bd=1, padx=10, pady=2)
        self.light_status_label.pack(side="left", padx=(0, 5))
        
        self.fan_status_label = tk.Label(status_frame, text="Fan: Unknown", 
                                       font=("Arial", 9), bg="#e5e7eb", fg=self.secondary_color,
                                       relief="solid", bd=1, padx=10, pady=2)
        self.fan_status_label.pack(side="left", padx=5)
        
        self.motor_status_label = tk.Label(status_frame, text="Motor: Unknown", 
                                         font=("Arial", 9), bg="#e5e7eb", fg=self.secondary_color,
                                         relief="solid", bd=1, padx=10, pady=2)
        self.motor_status_label.pack(side="left", padx=(5, 0))
        
        controls_frame = tk.Frame(device_frame, bg=self.card_color)
        controls_frame.pack(fill="x", padx=10, pady=5)
        
        light_frame = tk.Frame(controls_frame, bg=self.card_color)
        light_frame.pack(anchor="w", pady=2)
        tk.Label(light_frame, text="Light:", font=("Arial", 9), bg=self.card_color, width=8).pack(side="left")
        tk.Button(light_frame, text="ON", font=("Arial", 8), bg=self.success_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/light", "ON")).pack(side="left", padx=2)
        tk.Button(light_frame, text="OFF", font=("Arial", 8), bg=self.danger_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/light", "OFF")).pack(side="left", padx=2)
        
        fan_frame = tk.Frame(controls_frame, bg=self.card_color)
        fan_frame.pack(anchor="w", pady=2)
        tk.Label(fan_frame, text="Fan:", font=("Arial", 9), bg=self.card_color, width=8).pack(side="left")
        tk.Button(fan_frame, text="ON", font=("Arial", 8), bg=self.success_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/fan", "ON")).pack(side="left", padx=2)
        tk.Button(fan_frame, text="OFF", font=("Arial", 8), bg=self.danger_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/fan", "OFF")).pack(side="left", padx=2)
        
        motor_frame = tk.Frame(controls_frame, bg=self.card_color)
        motor_frame.pack(anchor="w", pady=2)
        tk.Label(motor_frame, text="Motor:", font=("Arial", 9), bg=self.card_color, width=8).pack(side="left")
        tk.Button(motor_frame, text="Forward", font=("Arial", 8), bg=self.primary_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/motor", "FORWARD")).pack(side="left", padx=2)
        tk.Button(motor_frame, text="Stop", font=("Arial", 8), bg=self.secondary_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/motor", "STOP")).pack(side="left", padx=2)
        tk.Button(motor_frame, text="Backward", font=("Arial", 8), bg=self.warning_color, fg="white", 
                 relief="flat", width=8, command=lambda: self.control_device("home/control/motor", "BACKWARD")).pack(side="left", padx=2)
    
    def create_graphs(self):
        sensor_graph_frame = self.create_card("Sensor Data Visualization")
        self.sensor_graph_container = sensor_graph_frame
        
        device_graph_frame = self.create_card("Device States Visualization")
        self.device_graph_container = device_graph_frame
        
    def setup_graphs(self):
        self.sensor_fig = Figure(figsize=(7.5, 5), dpi=80, facecolor='white')
        self.device_fig = Figure(figsize=(7.5, 7), dpi=80, facecolor='white')
        
        self.ax1 = self.sensor_fig.add_subplot(311)  # Temperature
        self.ax2 = self.sensor_fig.add_subplot(312)  # Humidity
        self.ax3 = self.sensor_fig.add_subplot(313)  # Light
        
        self.ax4 = self.device_fig.add_subplot(311)  # Light
        self.ax5 = self.device_fig.add_subplot(312)  # Fan
        self.ax6 = self.device_fig.add_subplot(313)  # Motor
        
        self.sensor_fig.tight_layout(pad=2.0)
        self.device_fig.tight_layout(pad=2.0)
        
        self.sensor_canvas = FigureCanvasTkAgg(self.sensor_fig, self.sensor_graph_container)
        self.sensor_canvas.draw()
        self.sensor_canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=5)
        
        self.device_canvas = FigureCanvasTkAgg(self.device_fig, self.device_graph_container)
        self.device_canvas.draw()
        self.device_canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=5)
        
        self.update_graphs()
        
    def update_graphs(self):
        try:
            self.ax1.clear()
            self.ax2.clear()
            self.ax3.clear()
            self.ax4.clear()
            self.ax5.clear()
            self.ax6.clear()
            
            # Temperature graph
            if sensor_data['temperature']['values']:
                self.ax1.plot(list(sensor_data['temperature']['times']), 
                             list(sensor_data['temperature']['values']), 'r-', linewidth=2)
                self.ax1.set_title('Temperature (°C)', fontsize=10)
                self.ax1.grid(True, alpha=0.3)
                
            # Humidity graph
            if sensor_data['humidity']['values']:
                self.ax2.plot(list(sensor_data['humidity']['times']), 
                             list(sensor_data['humidity']['values']), 'b-', linewidth=2)
                self.ax2.set_title('Humidity (%)', fontsize=10)
                self.ax2.grid(True, alpha=0.3)
                
            # Light graph
            if sensor_data['light']['values']:
                self.ax3.plot(list(sensor_data['light']['times']), 
                             list(sensor_data['light']['values']), 'y-', linewidth=2)
                self.ax3.set_title('Light Level (lx)', fontsize=10)
                self.ax3.grid(True, alpha=0.3)
                
            # Light state graph (stepped)
            if device_states['light']['values']:
                times = list(device_states['light']['times'])
                values = [1 if v == 'ON' else 0 for v in device_states['light']['values']]
                self.ax4.step(times, values, 'g-', where='post', linewidth=2)
                self.ax4.set_title('Light State', fontsize=10)
                self.ax4.set_ylim(-0.1, 1.1)
                self.ax4.set_yticks([0, 1])
                self.ax4.set_yticklabels(['OFF', 'ON'])
                self.ax4.grid(True, alpha=0.3)
                
            # Fan state graph (stepped)
            if device_states['fan']['values']:
                times = list(device_states['fan']['times'])
                values = [1 if v == 'ON' else 0 for v in device_states['fan']['values']]
                self.ax5.step(times, values, 'm-', where='post', linewidth=2)
                self.ax5.set_title('Fan State', fontsize=10)
                self.ax5.set_ylim(-0.1, 1.1)
                self.ax5.set_yticks([0, 1])
                self.ax5.set_yticklabels(['OFF', 'ON'])
                self.ax5.grid(True, alpha=0.3)
                
            # Motor state graph (stepped)
            if device_states['motor']['values']:
                times = list(device_states['motor']['times'])
                values = [1 if v == 'FORWARD' else -1 if v == 'BACKWARD' else 0 for v in device_states['motor']['values']]
                self.ax6.step(times, values, 'c-', where='post', linewidth=2)
                self.ax6.set_title('Motor State', fontsize=10)
                self.ax6.set_ylim(-1.1, 1.1)
                self.ax6.set_yticks([-1, 0, 1])
                self.ax6.set_yticklabels(['BACKWARD', 'STOP', 'FORWARD'])
                self.ax6.grid(True, alpha=0.3)
            
            for ax in [self.ax1, self.ax2, self.ax3, self.ax4, self.ax5, self.ax6]:
                ax.tick_params(axis='x', labelsize=8, rotation=45)
                ax.tick_params(axis='y', labelsize=8)
            
            self.sensor_fig.tight_layout(pad=1.5)
            self.device_fig.tight_layout(pad=1.5)
            self.sensor_canvas.draw()
            self.device_canvas.draw()
            
        except Exception as e:
            print(f"Graph update error: {e}")
        
        self.root.after(2000, self.update_graphs)
        
    def create_console(self):
        console_frame = self.create_card("Console Log")
        
        self.console_text = scrolledtext.ScrolledText(console_frame, height=10, 
                                                    font=("Courier", 9), bg="#1a1a1a", 
                                                    fg="#00ff00", insertbackground="white",
                                                    wrap=tk.WORD)
        self.console_text.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.console_text.bind("<MouseWheel>", self._on_mousewheel)
        self.console_text.bind("<Button-4>", lambda e: self.console_text.yview_scroll(-1, "units"))
        self.console_text.bind("<Button-5>", lambda e: self.console_text.yview_scroll(1, "units"))
        
        self.setup_console_logging()
        
    def setup_console_logging(self):
        class ConsoleHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
                
            def emit(self, record):
                msg = self.format(record)
                def append():
                    self.text_widget.insert(tk.END, msg + '\n')
                    self.text_widget.see(tk.END)
                self.text_widget.after(0, append)
        
        console_handler = ConsoleHandler(self.console_text)
        console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        logging.getLogger().addHandler(console_handler)
        
    def create_footer(self):
        footer_frame = tk.Frame(self.scrollable_frame, bg=self.secondary_color, height=50)
        footer_frame.pack(fill="x", side="bottom")
        footer_frame.pack_propagate(False)
        
        footer_text = tk.Label(footer_frame, 
                              text="Developed by Ha Minh Tri (ITCSIU22194) under the supervision of M.Eng. Vo Minh Thanh for the IoT Course, Semester 03, Academic Year 2024-2025.",
                              font=("Arial", 8), bg=self.secondary_color, fg="white", wraplength=650)
        footer_text.pack(expand=True, pady=10)
        
    def create_card(self, title):
        card_frame = tk.Frame(self.scrollable_frame, bg=self.card_color, relief="solid", bd=1)
        card_frame.pack(fill="x", padx=15, pady=8)
        
        title_frame = tk.Frame(card_frame, bg=self.primary_color, height=30)
        title_frame.pack(fill="x")
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text=title, font=("Arial", 10, "bold"), 
                              bg=self.primary_color, fg="white")
        title_label.pack(anchor="w", padx=10, pady=5)
        
        return card_frame
    
    def connect_mqtt(self):
        global client, broker, port, username, password
        try:
            broker = self.broker_entry.get()
            port = int(self.port_entry.get())
            username = self.username_entry.get()
            password = self.password_entry.get()
            
            client.disconnect()
            time.sleep(1)
            
            client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv311)
            client.on_connect = on_connect
            client.on_message = on_message
            client.username_pw_set(username, password)
            
            client.connect(broker, port, 60)
            client.loop_start()
            
            logging.info("MQTT connection initiated")
            
        except Exception as e:
            logging.error(f"MQTT connection failed: {e}")
            messagebox.showerror("Error", f"MQTT connection failed: {e}")
    
    def update_connection_status(self, connected):
        self.is_connected = connected
        if connected:
            self.connection_status.config(text="● Connected", fg=self.success_color)
            self.connect_btn.config(text="Reconnect")
        else:
            self.connection_status.config(text="● Disconnected", fg=self.danger_color)
            self.connect_btn.config(text="Connect")

    def submit_manual_data(self):
        try:
            temp = float(self.temp_entry.get()) if self.temp_entry.get() else None
            humidity = float(self.humidity_entry.get()) if self.humidity_entry.get() else None
            light = float(self.light_entry.get()) if self.light_entry.get() else None
            
            if temp is not None:
                client.publish("home/sensors/temperature", str(temp), qos=1)
                logging.info(f"Published manual temperature: {temp}")
                
            if humidity is not None:
                client.publish("home/sensors/humidity", str(humidity), qos=1)
                logging.info(f"Published manual humidity: {humidity}")
                
            if light is not None:
                client.publish("home/sensors/light", str(light), qos=1)
                logging.info(f"Published manual light: {light}")
                
            self.temp_entry.delete(0, tk.END)
            self.humidity_entry.delete(0, tk.END)
            self.light_entry.delete(0, tk.END)
            
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric values")
        except Exception as e:
            logging.error(f"Error publishing manual data: {e}")
            messagebox.showerror("Error", f"Failed to publish data: {e}")

    def control_device(self, topic, command):
        valid_commands = {
            'home/control/light': ['ON', 'OFF'],
            'home/control/fan': ['ON', 'OFF'],
            'home/control/motor': ['FORWARD', 'BACKWARD', 'STOP']
        }
        if topic in valid_commands and command in valid_commands[topic]:
            try:
                client.publish(topic, command, qos=1)
                logging.info(f"Published control command: {command} to {topic}")
            except Exception as e:
                logging.error(f"Error publishing command: {e}")
                messagebox.showerror("Error", f"Failed to send command: {e}")
        else:
            messagebox.showerror("Error", "Invalid command or topic")

    def toggle_mock_data(self):
        global is_simulating, simulation_thread
        if is_simulating:
            simulation_event.clear()
            is_simulating = False
            self.mock_button.config(text="Start Mock Data", bg=self.primary_color)
            logging.info("Mock data simulation stopped")
        else:
            simulation_event.set()
            simulation_thread = threading.Thread(target=simulate_sensors, daemon=True)
            simulation_thread.start()
            is_simulating = True
            self.mock_button.config(text="Stop Mock Data", bg=self.danger_color)
            logging.info("Mock data simulation started")

    def update_sensor(self, sensor, value):
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        
        sensor_data[sensor]['values'].append(value)
        sensor_data[sensor]['times'].append(current_time)
        
        if sensor == "temperature":
            self.temp_label.config(text=f"Temperature: {value:.2f} °C" if value is not None else "Temperature: -- °C")
        elif sensor == "humidity":
            self.humidity_label.config(text=f"Humidity: {value:.2f} %" if value is not None else "Humidity: -- %")
        elif sensor == "light":
            self.light_label.config(text=f"Light Level: {value:.2f} lx" if value is not None else "Light Level: -- lx")

    def update_device_status(self, device, status):
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        
        device_states[device]['values'].append(status)
        device_states[device]['times'].append(current_time)
        
        if device == "light":
            color = self.success_color if status == "ON" else self.secondary_color
            self.light_status_label.config(text=f"Light: {status}", bg=color, fg="white")
        elif device == "fan":
            color = self.success_color if status == "ON" else self.secondary_color
            self.fan_status_label.config(text=f"Fan: {status}", bg=color, fg="white")
        elif device == "motor":
            if status in ["FORWARD", "BACKWARD"]:
                color = self.primary_color
            else:
                color = self.secondary_color
            self.motor_status_label.config(text=f"Motor: {status}", bg=color, fg="white")

# MQTT callbacks
def on_connect(client, userdata, flags, reason_code, properties=None):
    if reason_code == 0:
        logging.info("Connected to MQTT Broker!")
        gui.update_connection_status(True)
        client.subscribe("home/sensors/temperature", qos=1)
        client.subscribe("home/sensors/humidity", qos=1)
        client.subscribe("home/sensors/light", qos=1)
        client.subscribe("home/control/light", qos=1)
        client.subscribe("home/control/fan", qos=1)
        client.subscribe("home/control/motor", qos=1)
    else:
        logging.error(f"Failed to connect, return code {reason_code}")
        gui.update_connection_status(False)

def on_message(client, userdata, msg):
    topic = msg.topic
    payload = msg.payload.decode()
    logging.info(f"Received {payload} from {topic}")
    try:
        if topic == "home/sensors/temperature":
            gui.update_sensor("temperature", float(payload))
        elif topic == "home/sensors/humidity":
            gui.update_sensor("humidity", float(payload))
        elif topic == "home/sensors/light":
            gui.update_sensor("light", float(payload))
        elif topic == "home/control/light":
            gui.update_device_status("light", payload.upper())
        elif topic == "home/control/fan":
            gui.update_device_status("fan", payload.upper())
        elif topic == "home/control/motor":
            gui.update_device_status("motor", payload.upper())
    except Exception as e:
        logging.error(f"Error processing message from {topic}: {e}")

# Simulate sensor data
def simulate_sensors():
    while simulation_event.is_set():
        temp = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(40.0, 80.0), 2)
        light = round(random.uniform(100, 1000), 2)
        try:
            client.publish("home/sensors/temperature", str(temp), qos=1)
            client.publish("home/sensors/humidity", str(humidity), qos=1)
            client.publish("home/sensors/light", str(light), qos=1)
            logging.info(f"Published sensor data: T={temp}°C, H={humidity}%, L={light}lx")
        except Exception as e:
            logging.error(f"Error publishing sensor data: {e}")
        time.sleep(5)

# Main execution
if __name__ == "__main__":
    root = tk.Tk()
    gui = IoTSimulatorGUI(root)

    client.on_connect = on_connect
    client.on_message = on_message
    client.username_pw_set(username, password)
    try:
        client.connect(broker, port, 60)
        client.loop_start()
        logging.info("MQTT client started")
    except Exception as e:
        logging.error(f"MQTT connection failed: {e}")
        messagebox.showerror("Error", f"MQTT connection failed: {e}")

    root.mainloop()